# Reference: https://www.exclamationlabs.com/blog/continuous-deployment-to-npm-using-gitlab-ci/

# GitLab uses docker in the background, so we need to specify the 
# image versions. This is useful because we're freely to use
# multiple node versions to work with it. They come from the docker
# repo.
# Uses Python latest
image: python:3.7

# We tell GitLab to install all the packages
# before running anything.
before_script:  
  - apt-get update -qq && apt-get install
  - pip install docker-compose

# You specify the stages. Those are the steps that GitLab will go through 
# Order matters. 
stages:
  - build
  - production

build:
  stage: build
  script:
    - docker-compose -f docker-compose.production.yml build

deploy-prod:
  stage: production
  before_script:
    # Generates to connect to the AWS unit the SSH key.
    - mkdir -p ~/.ssh
    - echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    # Sets the permission to 600 to prevent a problem with AWS
    # that it's too unprotected.
    - chmod 600  ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'   
  script:     
    - bash ./gitlab-deploy/.gitlab-deploy.prod.sh   
  environment:     
    name: production     
    # Exposes a button that when clicked take you to the defined URL:
    url: $DEPLOY_SERVER_URL
  when: manual
